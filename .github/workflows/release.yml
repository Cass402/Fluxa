name: Release Pipeline

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  SOLANA_VERSION: "2.1.0"
  ANCHOR_VERSION: "0.31.0"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install Rust
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Install Solana
      - name: Install Solana
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          solana --version

      # Install Anchor
      - name: Install Anchor
        run: |
          cargo install --git https://github.com/coral-xyz/anchor --tag v${{ env.ANCHOR_VERSION }} anchor-cli --locked
          anchor --version

      # Cache Dependencies
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # Build programs
      - name: Build
        run: anchor build

      # Run tests
      - name: Run tests
        run: anchor test

      # Security scanning
      - name: Security audit
        run: |
          cargo install cargo-audit
          cargo audit

      # Create artifacts
      - name: Prepare release artifacts
        run: |
          mkdir -p artifacts
          cp target/deploy/*.so artifacts/
          cp target/idl/*.json artifacts/
          tar -czvf fluxa-programs-${{ github.ref_name }}.tar.gz artifacts/

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            fluxa-programs-${{ github.ref_name }}.tar.gz
          body: |
            # Fluxa ${{ github.ref_name }} Release

            ## Program Binaries
            - This release includes compiled Solana program binaries (.so files)
            - Interface Definition Language (IDL) files for program integration

            ## Installation
            Extract the archive and deploy using the Solana CLI:
            ```
            solana program deploy <program.so>
            ```

            ## Documentation
            For detailed documentation, see the [project docs](https://github.com/${{ github.repository }}/tree/main/docs)

            ## Changelog
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and deploy frontend
  deploy-frontend:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "yarn"

      - name: Install dependencies
        run: |
          cd frontend
          yarn install --frozen-lockfile

      - name: Build frontend
        run: |
          cd frontend
          yarn build
        env:
          REACT_APP_ENVIRONMENT: "production"

      - name: Deploy to production hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          channelId: live
          projectId: fluxa-prod

  # Deploy to testnet for final validation
  deploy-testnet:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4

      # Setup similar environment as build job
      - name: Install required tools
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          cargo install --git https://github.com/coral-xyz/anchor --tag v${{ env.ANCHOR_VERSION }} anchor-cli --locked

      # Setup Solana CLI config for testnet deployment
      - name: Setup Solana Config
        run: |
          mkdir -p ~/.config/solana
          echo "${{ secrets.SOLANA_TESTNET_PRIVATE_KEY }}" > keypair.json
          solana config set --keypair keypair.json
          solana config set --url https://api.testnet.solana.com

      # Deploy to testnet
      - name: Deploy to testnet
        run: |
          anchor build
          anchor deploy --provider.cluster testnet

      # Verify deployment
      - name: Verify testnet deployment
        run: |
          echo "Verifying deployment..."
          solana program show --output json $(solana address -k target/deploy/amm_core-keypair.json)

  # Deploy to mainnet job - requires manual approval
  deploy-mainnet:
    needs: [build, deploy-testnet]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      # Setup similar environment as build job
      - name: Install required tools
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          cargo install --git https://github.com/coral-xyz/anchor --tag v${{ env.ANCHOR_VERSION }} anchor-cli --locked

      # Setup Solana CLI config for mainnet deployment
      - name: Setup Solana Config
        run: |
          mkdir -p ~/.config/solana
          echo "${{ secrets.SOLANA_MAINNET_PRIVATE_KEY }}" > keypair.json
          solana config set --keypair keypair.json
          solana config set --url https://api.mainnet-beta.solana.com

      # Deploy to mainnet
      - name: Deploy to mainnet
        run: |
          anchor build
          anchor deploy --provider.cluster mainnet-beta

      # Verify deployment
      - name: Verify mainnet deployment
        run: |
          echo "Verifying deployment..."
          solana program show --output json $(solana address -k target/deploy/amm_core-keypair.json)

      # Create deployment record
      - name: Create deployment record
        run: |
          DEPLOYMENT_RECORD=$(cat <<EOF
          {
            "version": "${{ github.ref_name }}",
            "date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "deployer": "${{ github.actor }}",
            "environment": "mainnet",
            "commit": "${{ github.sha }}"
          }
          EOF
          )
          echo "$DEPLOYMENT_RECORD" > deployment-record.json

      # Send notification
      - name: Send deployment notification
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "ðŸš€ Mainnet Deployment"
          SLACK_MESSAGE: "Successfully deployed ${{ github.ref_name }} to Solana Mainnet"
          SLACK_COLOR: good
